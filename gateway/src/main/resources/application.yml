spring:
  main:
    banner-mode: "off"
  cache:
    type: redis
  cloud:
    discovery:
      enabled: true
      reactive:
        enabled: true
    circuitbreaker:
      resilience4j:
        reactive:
          enabled: true
        enabled: true
    gateway:
#      fail-on-route-definition-error: false
#      routes:
#        - id: after_route
#          uri: http://whoami2
#          predicates:
#            - Path=/who
      discovery:
        locator:
          enabled: true
#          url-expression: "uri"
          predicates:
            - name: Path
              args:
                patterns: "metadata['path']"
          filters:
            - RemoveRequestHeader='Cookie'
            - RemoveRequestHeader='X-Jwt-Assertion'
            # Prevent propagation of traces
            - RemoveRequestHeader='X-B3-TraceId'
            - RemoveRequestHeader='X-Trace-Id'
            - name: CircuitBreaker
              args:
                name: "'myCircuitBreaker'"
                fallbackUri: "'forward:/unavailable'"
            - name: RewritePath
              args:
                regexp: "metadata['path.regexp']"
                replacement: "metadata['path.replacement']"
#    inetutils:
#      ignoredInterfaces:
#        - docker0
#        - veth.*
#        - eth3
    loadbalancer:
      ribbon:
        enabled: false
      cache:
        enabled: false
resilience4j:
  circuitbreaker:
    instances:
      myCircuitBreaker:
        registerHealthIndicator: true
        slidingWindowSize: 100
  retry:
    instances:
      myCircuitBreaker:
        maxAttempts: 3
        waitDuration: 10s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
        retryExceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.io.IOException
management:
  endpoint.gateway.enabled: true # default value
  endpoints:
    web:
      exposure:
        #include: health,gateway,info,caches
        include: "*"
#logging:
#  level:
#    root: debug
