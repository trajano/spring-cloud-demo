cloud:
  aws:
    s3:
      # This is to make it bypass the error message when AWS is not enabled.
      region: us-east-2
spring:
  application:
    name: gateway
  jmx:
    enabled: true
  redis:
    lettuce:
      pool:
        max-wait: 2s
  sleuth:
    reactor:
      instrumentation-type: decorate_queues
    trace-id128: true
  main:
    banner-mode: "off"
  cache:
    type: redis
  cloud:
    discovery:
      client:
        health-indicator:
          enabled: true
      enabled: true
      reactive:
        enabled: true
    circuitbreaker:
      resilience4j:
        reactive:
          enabled: true
        enabled: true
    gateway:
      # https://cloud.spring.io/spring-cloud-gateway/reference/html/appendix.html
      globalcors:
        add-to-simple-url-handler-mapping: true
        cors-configurations:
          '[/**]':
#            allowedOrigins: "*"
            allowCredentials: false
            allowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - PATCH
      httpclient:
        connect-timeout: 10000
        response-timeout: 20s
#      fail-on-route-definition-error: false
#      routes:
#        - id: after_route
#          uri: http://whoami2
#          predicates:
#            - Path=/who
      metrics:
        enabled: true
        tags:
          path:
            enabled: true
      discovery:
        locator:
          enabled: true
#          url-expression: "uri"
          predicates:
            - name: Path
              args:
                patterns: "metadata['path']"
          filters:
#            - name: RequestRateLimiter
#              args:
#                redis-rate-limiter.replenishRate: 10
#                redis-rate-limiter.burstCapacity: 20
#                redis-rate-limiter.requestedTokens: 1
            - RemoveRequestHeader='Cookie'
            - RemoveRequestHeader='X-Jwt-Assertion'
            # Prevent propagation of traces
            - RemoveRequestHeader='X-Amzn-Trace-Id'
            - RemoveRequestHeader='X-B3-TraceId'
            - RemoveRequestHeader='X-Trace-ID'

            # Redirect to add trailing slash if requesting a resource that ends with `/**` and the the request didn't end with `/`
            - name: StarStarRedirect
              args:
                path: "metadata['path']"
                active: "metadata['allow.missing.trailing.slash']"
            - ClientValid
            - name: ProtectedResource
              args:
                serviceId: serviceId
#            - name: Retry
#              args:
#                retries: 3
#              methods:
#                - GET
            - name: RewritePath
              args:
                regexp: "metadata['path.regexp']"
                replacement: "metadata['path.replacement']"
            - name: CircuitBreaker
              args:
                # Choose 'resilience' meta or use the 'protocol' defaulting to 'http'
                name: "metadata['resilience'] ?: metadata['protocol'] ?: 'http'"
                fallbackUri: "'forward:/unavailable'"
            - name: DiscoveryRequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                deny-empty-key: false
            - name: Grpc
              args:
                serviceId: serviceId
                instanceId: instanceId
                host: host
                useGrpc: "metadata['protocol'] == 'grpc'"
                port: port
#      routes:
#        - id: hello
#          uri: http://example.org
#          predicates:
#            - Path=/hello
#          filters:
#            - name: Hello
#              args:
#                useHello: true
#    inetutils:
#      ignoredInterfaces:
#        - docker0
#        - veth.*
#        - eth3
    loadbalancer:
      ribbon:
        enabled: false
#      cache:
#        enabled: false
resilience4j:
  circuitbreaker:
    instances:
      auth:
        registerHealthIndicator: true
        slidingWindowSize: 100
        automaticTransitionFromOpenToHalfOpenEnabled: true
      http:
        registerHealthIndicator: true
        slidingWindowSize: 100
        automaticTransitionFromOpenToHalfOpenEnabled: true
      grpc:
        registerHealthIndicator: true
        slidingWindowSize: 100
        automaticTransitionFromOpenToHalfOpenEnabled: true
      streaming:
        registerHealthIndicator: true
        slidingWindowSize: 100
        automaticTransitionFromOpenToHalfOpenEnabled: true
  timelimiter:
    instances:
      auth:
        timeoutDuration: 3s
        cancelRunningFuture: true
      http:
        timeoutDuration: 3s
        cancelRunningFuture: true
      grpc:
        timeoutDuration: 1000000s
        cancelRunningFuture: false
      streaming:
        timeoutDuration: 1000000s
        cancelRunningFuture: false

management:
  health:
    redis:
      enabled: true
#  endpoint.gateway.enabled: true # default value
  endpoint:
    health:
      enabled: true
      show-details: ALWAYS
  endpoints:
#    enabled-by-default: false
    jmx:
      exposure:
        include: health
    web:
      exposure:
#        include: health,gateway,info,caches
        include: "*"
#logging:
#  level:
#    org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator: warn
#    request: error
#    root: warn
##    root: debug

simple-auth:
  enabled: true
