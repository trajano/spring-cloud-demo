plugins {
	id 'org.springframework.boot' version '2.6.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'net.trajano.swarm.conventions'
	id "com.diffplug.spotless" version "6.3.0"
}

group = 'net.trajano.swarm'
version = '0.0.1-SNAPSHOT'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

ext {
	set('springCloudVersion', "2021.0.1")
	set('testcontainersVersion', "1.16.2")
}

dependencies {
	implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	implementation 'io.awspring.cloud:spring-cloud-aws-autoconfigure:2.4.1'
	implementation 'io.micrometer:micrometer-registry-cloudwatch2:1.8.5'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
	implementation 'com.github.docker-java:docker-java-core'
	implementation 'com.github.docker-java:docker-java-transport-httpclient5'
	implementation 'org.bitbucket.b_c:jose4j:0.7.12'
	compileOnly 'org.projectlombok:lombok'
	implementation 'dnsjava:dnsjava:3.5.0'
	implementation project(':gateway-common')

	runtimeOnly 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.testcontainers:junit-jupiter'
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "com.github.docker-java:docker-java-bom:3.2.13"
	}
}

repositories {
	mavenCentral()
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('bootBuildImage') {
//	builder = 'paketobuildpacks/builder:tiny'
	// environment = ['BP_NATIVE_IMAGE': 'true']
}
