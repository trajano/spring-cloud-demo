openapi: 3.1.0
info:
  description: |
    Operations that are related to the authentication using the `SimpleIdentityProvider`
paths:
  /auth:
    post:
      summary: Authenticate user
      description: |
        Authenticates the user given the authentication credentials.
        If the authentication fails there is a penalty to the response.

        The `SimpleIdentityProvider` supports two authentication systems, a simplistic one
        and an OIDC version.
      operationId: authenticateUser
      parameters:
        - in: header
          name: Authorization
          description: |
            If using OIDC authentication, the access token may be optionally put into
            the header.  This is to support the OAuth 2.0 test mechanism provided by  
            Postman.
          schema:
            type: string
            example: Bearer ya23.alksdjfklasdjflkdsaf
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationCredentials"
            examples:
              good-login:
                summary: Good login
                value:
                  username: good
                  authenticated: true
                x-postman-tests: |
                  pm.test("Authenticated", () => {
                    pm.response.to.have.status(200);
                    const {
                      ok,
                      access_token: accessToken,
                      refresh_token: refreshToken,
                      expires_in: expiresIn,
                      token_type: tokenType,
                    } = pm.response.json();
                    pm.expect(ok).to.be.true;
                    pm.expect(tokenType).to.eql("Bearer");
                    pm.globals.set("access_token", accessToken);
                    pm.globals.set("refresh_token", refreshToken);
                  });
              bad-login:
                summary: Bad login
                value:
                  username: bad
                  authenticated: false
                x-postman-tests: |
                  pm.test("Unauthenticated", () => {
                    pm.response.to.have.status(401);
                    pm.expect(pm.response.responseTime).to.be.above(2000);
                    const {
                      ok,
                    } = pm.response.json();
                    pm.expect(ok).to.be.false;
                  });
              oidc-login:
                summary: OIDC Login
                value:
                  issuer: https://accounts.google.com
                  accessToken: ya73.dkajhfjkajsdhfjksahfkjsdf
      responses:
        200:
          description: Authenticated
          headers:
            X-B3-Traceid:
              $ref: "./components.yaml#/components/headers/X-B3-Traceid"
            X-Trace-ID:
              $ref: "./components.yaml#/components/headers/X-Trace-ID"
            Cache-Control:
              $ref: "./components.yaml#/components/headers/Cache-Control"
            Content-Type:
              $ref: "./components.yaml#/components/headers/Content-Type"
            Content-Length:
              $ref: "./components.yaml#/components/headers/Content-Length"
          content:
            application/json:
              schema:
                $ref: "./components.yaml#/components/schemas/OAuthTokenResponse"
        401:
          x-summary: Authentication failed
          description: |
            The request credentials did not pass the authentication check.
          headers:
            X-B3-Traceid:
              $ref: "./components.yaml#/components/headers/X-B3-Traceid"
            X-Trace-ID:
              $ref: "./components.yaml#/components/headers/X-Trace-ID"
            Cache-Control:
              $ref: "./components.yaml#/components/headers/Cache-Control"
            Content-Type:
              $ref: "./components.yaml#/components/headers/Content-Type"
            Content-Length:
              $ref: "./components.yaml#/components/headers/Content-Length"
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false

components:
  schemas:
    AuthenticationCredentials:
      oneOf:
        - $ref: "#/components/schemas/SimpleAuthenticationCredentials"
        - $ref: "#/components/schemas/OidcAuthenticationCredentials"
    SimpleAuthenticationCredentials:
      type: object
      required:
        - username
        - authenticated
      properties:
        username:
          type: string
        authenticated:
          type: boolean
        accessTokenExpiresInMillis:
          type: number
          minimum: 1000
          description: |
            Allow request to alter the access token expiration (for testing).
        refreshTokenExpiresInMillis:
          type: number
          minimum: 1000
          description: |
            Allow request to alter the refresh token expiration (for testing).
    OidcAuthenticationCredentials:
      type: object
      required:
        - issuer
      properties:
        accessToken:
          type: string
          description: |
            This is the `access_token` value that is is provided by the IP.  It is issuer specific.
            This is optional in that the value can be put as part of the HTTP header to support Postman more
            easily.
            
            Note this is the token only no `Bearer ` prefix.
        issuer:
          type: string
          description: |
            The url to the issuer
          example: https://accounts.google.com
          format: uri
    OAuthTokenResponse:
      type: object
      properties:
        ok:
          type: boolean
          example: true
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
          enum:
            - Bearer
        expires_in:
          type: number
          format: int32

  headers:
    "X-B3-Traceid":
      description: |
        Trace ID
      schema:
        type: string
    "Cache-Control":
      description: |
        Tells the client cache how to behave.  The value `no-cache` disables caching.
      schema:
        type: string
        example: no-cache
    "X-Trace-ID":
      description: |
        Trace ID in AWS X-Ray format
      schema:
        type: string
    "Content-Type":
      description: |
        Content type
      schema:
        type: string
        example: application/json
    "Content-Length":
      description: |
        Content length
      schema:
        type: number
        example: 42
  responses:
    missing-token:
      description: |
        The request is missing the token.  It expects a token to be present in the `Authorization` header
        with the prefix of `Bearer`.
      headers:
        X-B3-Traceid:
          $ref: "#/components/headers/X-B3-Traceid"
        X-Trace-ID:
          $ref: "#/components/headers/X-Trace-ID"
        Cache-Control:
          $ref: "#/components/headers/Cache-Control"
        Content-Type:
          $ref: "#/components/headers/Content-Type"
        Content-Length:
          $ref: "#/components/headers/Content-Length"
      content:
        application/json:
          schema:
            type: object
            properties:
              ok:
                type: boolean
                example: false
              error:
                type: string
                description: error code
            example:
              ok: false
              error: missing_token
    invalid-token:
      description: |
        The request had an invalid token.  By design, there's no other information to indicate why it is invalid but
        the reasons could be:
        
        1. the token has expired.
        2. the token was malformed and failed conversion checks.
        3. the signature validation did not pass.
      headers:
        X-B3-Traceid:
          $ref: "#/components/headers/X-B3-Traceid"
        X-Trace-ID:
          $ref: "#/components/headers/X-Trace-ID"
        Cache-Control:
          $ref: "#/components/headers/Cache-Control"
        Content-Type:
          $ref: "#/components/headers/Content-Type"
        Content-Length:
          $ref: "#/components/headers/Content-Length"
      content:
        application/json:
          schema:
            type: object
            properties:
              ok:
                type: boolean
                example: false
              error:
                type: string
                description: error code
            example:
              ok: false
              error: invalid_token
