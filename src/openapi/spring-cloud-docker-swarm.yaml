openapi: 3.1.0
info:
  title: Spring Cloud Docker Swarm
  version: 3.0.0
  description: |
    An implementation of Spring Cloud that utilizes Docker Swarm for service discovery and provides OAuth-like
    functionality for controlling access to the system.
    
    This is using the "SimpleIdentityProvider" which is used for demo and testing purposes.
  license:
    name: EPL-2.0
    url: https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.txt
servers:
  - description: local direct
    url: http://localhost:28082
    variables: {}
paths:
  /auth:
    post:
      summary: Authenticate user
      description: |
        Authenticates the user given the authentication credentials.
        If the authentication fails there is a penalty to the response.
      operationId: authenticateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationCredentials"
            examples:
              good-login:
                summary: Good login
                value:
                  username: good
                  authenticated: true
                x-postman-tests: |
                  pm.test("Authenticated", () => {
                    pm.response.to.have.status(200);
                    const {
                      ok,
                      access_token: accessToken,
                      refresh_token: refreshToken,
                      expires_in: expiresIn,
                      token_type: tokenType,
                    } = pm.response.json();
                    pm.expect(ok).to.be.true;
                    pm.expect(tokenType).to.eql("Bearer");
                    pm.globals.set("access_token", accessToken);
                    pm.globals.set("refresh_token", refreshToken);
                  });
              bad-login:
                summary: Bad login
                value:
                  username: bad
                  authenticated: false
                x-postman-tests: |
                  pm.test("Unauthenticated", () => {
                    pm.response.to.have.status(401);
                    pm.expect(pm.response.responseTime).to.be.above(2000);
                    const {
                      ok,
                    } = pm.response.json();
                    pm.expect(ok).to.be.false;
                  });
      responses:
        200:
          description: Authenticated
          headers:
            X-B3-Traceid:
              $ref: "#/components/headers/X-B3-Traceid"
            X-Trace-ID:
              $ref: "#/components/headers/X-Trace-ID"
            Cache-Control:
              $ref: "#/components/headers/Cache-Control"
            Content-Type:
              $ref: "#/components/headers/Content-Type"
            Content-Length:
              $ref: "#/components/headers/Content-Length"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthTokenResponse"
        401:
          description: Authentication failed
          headers:
            X-B3-Traceid:
              $ref: "#/components/headers/X-B3-Traceid"
            X-Trace-ID:
              $ref: "#/components/headers/X-Trace-ID"
            Cache-Control:
              $ref: "#/components/headers/Cache-Control"
            Content-Type:
              $ref: "#/components/headers/Content-Type"
            Content-Length:
              $ref: "#/components/headers/Content-Length"
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
  /whoami:
    get:
      summary: Show request headers
      operationId: whoami
      responses:
        200:
          description: Request headers
          content:
            text/plain:
              example: |
                Hostname: 13cecf3dbf5d
                IP: 127.0.0.1
                IP: 10.0.1.5
                IP: 172.18.0.8
                RemoteAddr: 10.0.1.69:36176
                GET /whoami HTTP/1.1
                Host: 10.0.1.5
                User-Agent: PostmanRuntime/7.29.0
                Accept: */*
                Accept-Encoding: gzip, deflate, br
                Authorization: Bearer eNoVjjcOo0AAAF_EiWigJBnvYliSSQ0imgVMNCa8_u6KaUYaaaoTLlnoYIRhZ4XOHl-wRR5JW23BPH1nT_ziG_sOaXrUx_TfrEUn2FJhZ_oOfiqwyfXif-u9rtdhYij-qU44l3r3X-LigvhFaXR8UnIZWiDuKA2FEy5C6AK844IJMGhHnNDiL1HACj4BWyjgZvox9Y_dvABlReQfow65gQstCoqpEACFuFCZ9W2XthmU2jOvJX9O9TgUOgU_n9Jtz_fO2V41yA5f38hO8ZJGtc35S9a6_VHZdk9Gf5BOfYspKSeOnvlK_CiPaWxn3i8lSyF4lf39Eb25Ijdewe3h0uFUHqbn5WuyMgFhVfSstHfZYbQyOvHcHEeyKo8GJ2fBkfxoLBXDiG3bJF-z6Hx0RPpbaodbuNLaw-7XLLDdpd4exIGzsi_uy0SpkoN4xGHrvhkMBXVfIGh58g8vSE1VI5PceIOAvLPTDiakDqTzTJ4aINJoKHuP8YE-aF2IpX8rsmPJk7KfYBDnJiY_x8jJoG5UQRhqh_kYmOSuQ_s2wyyrE2h7ZlQU1tNO_JR83c18WXGELG0yjY3chJ1UFRi2SdFpqp-Y1khyW8s0dF17uH-bsahF-BNz8AsZShQYQlGDWBN6YuLqabMhf2wpMuiNvXd8Jj5KZFy3H5ss7FXkC53RpNE07M5NiIRRyvW3qpr3YMSVL0jzhvkE2aPkBJBObX8Lx-p96Qs-PP7tos88iUH_pW8vYgHfn0oucyQe-w-9OtLMoMUgzWVduCpBw2OKbeaVZ5nP_c4UHf6oRDzm-0cVbzvT7DFVd0jJguVc1r3-drIYLBtnLgZ6W_GPX8odVWvkCHGpcyrmUDTSRXZVtvD8d3Kaai10qdJzDgvjv7RmHC8
                Forwarded: proto=http;host="localhost:28082";for="10.0.0.2:49716"
                Postman-Token: 209c6cc6-25ed-4a0e-afcb-324db834d557
                X-B3-Parentspanid: 71bb8c5d452ebbe6
                X-B3-Sampled: 1
                X-B3-Spanid: e77b9553fe3f25d8
                X-B3-Traceid: 627176c2b252abed7feb13dcfeca43e0
                X-Forwarded-For: 10.0.0.2
                X-Forwarded-Host: localhost:28082
                X-Forwarded-Port: 28082
                X-Forwarded-Proto: http
                X-Jwt-Assertion: eyJhbGciOiJub25lIn0.eyJqdGkiOiJiczJiU1E2Yy1BdWNIYk1EOWpicWJRIiwic3ViIjoiZ29vZCIsImV4cCI6MTY1MTYwMzI1NX0.
                X-Jwt-Audience: 

        401:
          $ref: "#/components/responses/invalid-token"

components:
  schemas:
    AuthenticationCredentials:
      type: object
      properties:
        username:
          type: string
        authenticated:
          type: boolean
    OAuthTokenResponse:
      type: object
      properties:
        ok:
          type: boolean
          example: true
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
          enum:
            - Bearer
        expires_in:
          type: number
          format: int32

  headers:
    "X-B3-Traceid":
      description: |
        Trace ID
      schema:
        type: string
    "Cache-Control":
      description: |
        Tells the client cache how to behave.  The value `no-cache` disables caching.
      schema:
        type: string
        example: no-cache
    "X-Trace-ID":
      description: |
        Trace ID in AWS X-Ray format
      schema:
        type: string
    "Content-Type":
      description: |
        Content type
      schema:
        type: string
        example: application/json
    "Content-Length":
      description: |
        Content length
      schema:
        type: number
        example: 42
  responses:
    invalid-token:
      description: |
        The request had an invalid token.  By design, there's no other information to indicate why it is invalid but
        the reasons could be:
        
        1. the token has expired.
        2. the token was malformed and failed conversion checks.
        3. the signature validation did not pass.
      headers:
        X-B3-Traceid:
          $ref: "#/components/headers/X-B3-Traceid"
        X-Trace-ID:
          $ref: "#/components/headers/X-Trace-ID"
        Cache-Control:
          $ref: "#/components/headers/Cache-Control"
        Content-Type:
          $ref: "#/components/headers/Content-Type"
        Content-Length:
          $ref: "#/components/headers/Content-Length"
      content:
        application/json:
          schema:
            type: object
            properties:
              ok:
                type: boolean
                example: false
              error:
                type: string
                description: error code
            example:
              ok: false
              error: invalid_token
