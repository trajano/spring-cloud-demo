version: "3.8"
services:
  edge:
    image: traefik:latest
    ports:
#      - 28083:8080
      - 28080:80
    command:
      - --global.checknewversion=false
      - --global.sendanonymoususage=false

      - --accesslog
      - --api
      - --api.dashboard
      - --api.insecure
      - --ping
      # - --log.level=debug
      - --entrypoints.http.address=:80
      - --providers.docker.exposedByDefault=false
      - --providers.docker.swarmMode=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.network=edge
      # - --providers.docker.useBindPortIP=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - edge
#    healthcheck:
#      test: traefik healthcheck --ping
    deploy:
      mode: global
      resources:
        limits:
          memory: 256m
  gateway:
    build:
      context: .
      target: gateway
    image: local/gateway
    environment:
      - SPRING_REDIS_HOST=redis
      - DOCKER_DISCOVERY_SWARMMODE=true
      - LOGGING_LEVEL_ROOT=error
#      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_SLEUTH=warn
    ports:
      - 28082:8080
    deploy:
      labels:
        traefik.enable: "true"
        traefik.docker.network: edge
        traefik.http.routers.gateway.rule: "PathPrefix(`/`)"
        traefik.http.routers.gateway.entryPoints: "http"
        traefik.http.routers.gateway.priority: "1"
        traefik.http.services.gateway.loadbalancer.server.port: "8080"
        traefik.http.services.gateway.loadbalancer.healthcheck.path: /ping
        traefik.http.services.gateway.loadbalancer.healthcheck.port: "8080"
        traefik.http.services.gateway.loadbalancer.healthcheck.interval: "10s"

        traefik.http.routers.dashboard.rule: (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
        traefik.http.routers.dashboard.entryPoints: http
        traefik.http.routers.dashboard.service: api@internal
#
      update_config:
#        order: start-first
        failure_action: pause
#        parallelism: 1
      restart_policy:
        max_attempts: 1
      replicas: 1
      resources:
        limits:
          #memory: 512m
          memory: 256m

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - services
      - edge
      - default
  redis:
    image: redis:6
    deploy:
      resources:
        limits:
          memory: 1g
  sample:
    build:
      context: .
      target: sample-service
    image: local/sample-service
    labels:
      docker.ids: sample
      docker.sample.path: /sample
      docker.sample.path.regexp: /sample/(?<remaining>.*)
      docker.sample.path.replacement: /$${remaining}
    networks:
      - services
  whoami:
    image: containous/whoami
    deploy:
      labels:
        docker.ids: whoami,xxx
        docker.whoami.path: /whoami/**
        docker.whoami.path.replacement: /$${remaining}
        docker.whoami.port: 80
        docker.xxx.path: /xxx/**
        docker.xxx.port: 80
      replicas: 5
      endpoint_mode: dnsrr
      resources:
        limits:
          memory: 64m
    labels:
      docker.ids: whoami,xxx
      docker.whoami.path: /whoami/**
      docker.whoami.path.replacement: /$${remaining}
      docker.xxx.path: /xxx/**
    networks:
      - services
  wsecho:
    image: solsson/websocat
    command: "--text ws-l:0.0.0.0:8080 broadcast:mirror:"
    deploy:
      labels:
        docker.ids: wsecho
        docker.wsecho.path: /wsecho/**
        docker.wsecho.port: 8080
      resources:
        limits:
          memory: 64m
      replicas: 2
      endpoint_mode: vip
    networks:
      - services
  httpbin:
    image: kennethreitz/httpbin
    deploy:
      labels:
        docker.ids: httpbin
        docker.httpbin.path: /httpbin/**
        docker.httpbin.path.replacement: /$${remaining}
        docker.httpbin.port: 80
      resources:
        limits:
          memory: 64m
      replicas: 3
      endpoint_mode: vip
    networks:
      - services
  whoami2:
    image: containous/whoami
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.whoami2.rule: "PathPrefix(`/w/`)"
        traefik.http.routers.whoami2.entryPoints: "http"
        traefik.http.routers.whoami2.priority: "1000"
        traefik.http.services.whoami2.loadbalancer.server.port: "80"

        docker.ids: whoami2
        docker.whoami2.path: /whoami2/**
        docker.whoami2.path.replacement: /$${remaining}
        docker.whoami2.port: 80
      replicas: 3
      endpoint_mode: vip
      resources:
        limits:
          memory: 64m
    networks:
      - services
      - edge
  whoami3:
    image: containous/whoami
    deploy:
      labels:
        docker.ids: whoami3
        docker.whoami3.path: /non/**
        docker.whoami3.path.replacement: /$${remaining}
        docker.whoami3.port: 80
      replicas: 0
      endpoint_mode: vip
      resources:
        limits:
          memory: 64m
    networks:
      - services
networks:
  edge:
    name: edge
    internal: false
  services:
    name: services